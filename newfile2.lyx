#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
W niniejszym projekcie udało się zamodelować grawitację układu słonecznego
 (oraz nie tylko jego).
 Dla modelu istotne są w planetach: masa, prędkość oraz położenie.
 Przyśpieszenie jest wyznaczane na podsatwie masy oraz położenia (używając
 II prawa Newtona).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

$F_{ij}=a_{ij}m_i$
\end_layout

\end_inset

 oraz 
\begin_inset ERT
status open

\begin_layout Plain Layout

$F=
\backslash
frac{Gm_im_j}{d^2}$
\end_layout

\end_inset

 czyli 
\begin_inset ERT
status open

\begin_layout Plain Layout

$a=
\backslash
frac{Gm_j}{d^2}$
\end_layout

\end_inset

.
 Oczywiście przyśpieszenie musi być w jakimś kierunku, czyli: 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
vec{a_{ij}}=
\backslash
frac{Gm_2}{d^2} * 
\backslash
vec{u_{ij}}$
\end_layout

\end_inset

, gdzie 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
vec{u_{ij}}=
\backslash
frac{x_2-x_1}{|x_2-x_1|}$
\end_layout

\end_inset

 jest wektorem jednostkowym.
\end_layout

\begin_layout Standard
Jeśli przełożyć to na układ kilku objeków (np.
 planet), otrzymamy: 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
vec{a}_i=
\backslash
sum
\backslash
limits_{j=1
\backslash
&j
\backslash
neq{i}}^{n=objects}
\backslash
vec{a_{ij}}$
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
Używając oznaczeń pochodnych:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
ddot{x}=a$
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
dot{x}=v$
\end_layout

\end_inset


\end_layout

\begin_layout Standard
podstawiając do RK1:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

$x(h)=x(0)+hv(0)$
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
dot{x}(h)=v(0)+ha(0)$
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Można w kodzie zmienić grawitację, położenie oraz dodawać bezpośrednio w
 kodzie nowe planety.
 Bardzo ciekawym doświadczeniem jest zwiększenie masy innej planety np.
 marsa, aby można było pokazać układ 2 słońc.
\end_layout

\begin_layout Standard
Symulację można zobaczyc przez
\color red
 python example.py.
 
\color black
Można także zobaczyć 4s film o nazwie first.ogg.
\end_layout

\end_body
\end_document
